{"ast":null,"code":"var _jsxFileName = \"/Users/alinailina/Desktop/phonebook/client/src/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport contactsService from \"./services/contacts\";\nimport Search from \"./components/Search\";\nimport Form from \"./components/Form\";\nimport Contacts from \"./components/Contacts\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [err, setErr] = useState(false); // Gell all\n\n  useEffect(() => {\n    contactsService.getAll().then(response => {\n      setContacts(response.data);\n      console.log(response.data);\n      console.log(contacts);\n    });\n  }, []);\n\n  const handleName = e => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumber = e => {\n    setNewNumber(e.target.value);\n  }; // Add contact\n\n\n  const addContact = e => {\n    e.preventDefault(); // Create new contact object\n\n    const newContact = {\n      name: newName,\n      number: newNumber\n    }; // Check if contact exists\n\n    const existingContact = contacts.find(contact => contact.name === newContact.name); // If true\n\n    if (existingContact) {\n      alert(`${newContact.name} already exists! Update number?`);\n      const updatedContact = { ...existingContact,\n        number: newContact.number\n      };\n      console.log(existingContact); // // Find index of existing contact\n      // const index = contacts.findIndex(\n      //   (contact) => contact.name === updatedContact.name\n      // );\n      // // Update existing contact\n      // contactsService\n      //   .update(index, updatedContact)\n      //   .then((response) => {\n      //     setContacts(\n      //       contacts.map((contact, i) =>\n      //         i !== index ? contact : response.data\n      //       )\n      //     );\n      //     setMessage(`Updated ${updatedContact.name}'s number`);\n      //     setTimeout(() => {\n      //       setMessage(null);\n      //     }, 3000);\n      //   })\n\n      contactsService.update(updatedContact).then(response => {\n        console.log(response.data);\n        setContacts(contacts.map(contact => contact.id !== updatedContact.id ? contact : response.data));\n        setMessage(`Updated ${updatedContact.name}'s number`);\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n      }) // Handle error\n      .catch(error => {\n        setErr(true);\n        setMessage(`Oops, ${updatedContact.name} has already been deleted from the server `);\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n        setContacts(contacts.filter(contact => contact.name !== updatedContact.name));\n      });\n    } else {\n      // Add new contact\n      contactsService.add(newContact).then(response => {\n        setContacts(contacts.concat(response.data));\n        console.log(response.data);\n        setMessage(`Added ${newContact.name}`);\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n      });\n    } // Clear inputs\n\n\n    setNewName(\"\");\n    setNewNumber(\"\");\n    setErr(false);\n  }; // Delete contact\n\n\n  const deleteContact = id => {\n    contactsService.deleteContact(id).then(response => {\n      const newArr = contacts.filter(contact => contact.id !== id);\n      setContacts(newArr);\n    });\n  }; // Search\n\n\n  const handleQuery = e => {\n    setQuery(e.target.value);\n  };\n\n  const searchResults = contacts.filter(contact => contact.name.toLowerCase() === query.toLowerCase());\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, \"Phonebook\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, \"Search contacts\"), /*#__PURE__*/React.createElement(Search, {\n    handleQuery: handleQuery,\n    searchResults: searchResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, \"Add contact\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: addContact,\n    name: newName,\n    number: newNumber,\n    handleName: handleName,\n    handleNumber: handleNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, \"Contacts\"), /*#__PURE__*/React.createElement(Notification, {\n    message: message,\n    err: err,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Contacts, {\n    contacts: contacts,\n    deleteContact: deleteContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/alinailina/Desktop/phonebook/client/src/index.js"],"names":["React","useEffect","useState","ReactDOM","contactsService","Search","Form","Contacts","Notification","App","contacts","setContacts","newName","setNewName","newNumber","setNewNumber","query","setQuery","message","setMessage","err","setErr","getAll","then","response","data","console","log","handleName","e","target","value","handleNumber","addContact","preventDefault","newContact","name","number","existingContact","find","contact","alert","updatedContact","update","map","id","setTimeout","catch","error","filter","add","concat","deleteContact","newArr","handleQuery","searchResults","toLowerCase","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport contactsService from \"./services/contacts\";\n\nimport Search from \"./components/Search\";\nimport Form from \"./components/Form\";\nimport Contacts from \"./components/Contacts\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [err, setErr] = useState(false);\n\n  // Gell all\n  useEffect(() => {\n    contactsService.getAll().then((response) => {\n      setContacts(response.data);\n      console.log(response.data);\n      console.log(contacts);\n    });\n  }, []);\n\n  const handleName = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumber = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  // Add contact\n  const addContact = (e) => {\n    e.preventDefault();\n\n    // Create new contact object\n    const newContact = {\n      name: newName,\n      number: newNumber,\n    };\n\n    // Check if contact exists\n    const existingContact = contacts.find(\n      (contact) => contact.name === newContact.name\n    );\n\n    // If true\n    if (existingContact) {\n      alert(`${newContact.name} already exists! Update number?`);\n      const updatedContact = { ...existingContact, number: newContact.number };\n    \n    \n      console.log(existingContact); \n      \n      // // Find index of existing contact\n      // const index = contacts.findIndex(\n      //   (contact) => contact.name === updatedContact.name\n      // );\n\n      // // Update existing contact\n      // contactsService\n      //   .update(index, updatedContact)\n      //   .then((response) => {\n      //     setContacts(\n      //       contacts.map((contact, i) =>\n      //         i !== index ? contact : response.data\n      //       )\n      //     );\n      //     setMessage(`Updated ${updatedContact.name}'s number`);\n      //     setTimeout(() => {\n      //       setMessage(null);\n      //     }, 3000);\n      //   })\n\n\n      contactsService\n        .update(updatedContact)\n        .then((response) => {\n          console.log(response.data);\n          setContacts(\n            contacts.map((contact) =>\n              contact.id !== updatedContact.id ? contact : response.data\n            )\n          );\n          setMessage(`Updated ${updatedContact.name}'s number`);\n          setTimeout(() => {\n            setMessage(null);\n          }, 3000);\n        })\n\n        // Handle error\n        .catch((error) => {\n          setErr(true);\n          setMessage(\n            `Oops, ${updatedContact.name} has already been deleted from the server `\n          );\n          setTimeout(() => {\n            setMessage(null);\n          }, 3000);\n          setContacts(\n            contacts.filter((contact) => contact.name !== updatedContact.name)\n          );\n        });\n    } else {\n      // Add new contact\n      contactsService.add(newContact).then((response) => {\n        setContacts(contacts.concat(response.data));\n        console.log(response.data);\n        setMessage(`Added ${newContact.name}`);\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n      });\n    }\n\n    // Clear inputs\n    setNewName(\"\");\n    setNewNumber(\"\");\n    setErr(false);\n  };\n\n  // Delete contact\n  const deleteContact = (id) => {\n    contactsService.deleteContact(id).then((response) => {\n      const newArr = contacts.filter((contact) => contact.id !== id);\n      setContacts(newArr);\n    });\n  };\n\n  // Search\n  const handleQuery = (e) => {\n    setQuery(e.target.value);\n  };\n\n  const searchResults = contacts.filter(\n    (contact) => contact.name.toLowerCase() === query.toLowerCase()\n  );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <h3>Search contacts</h3>\n      <Search handleQuery={handleQuery} searchResults={searchResults} />\n      <h3>Add contact</h3>\n      <Form\n        onSubmit={addContact}\n        name={newName}\n        number={newNumber}\n        handleName={handleName}\n        handleNumber={handleNumber}\n      />\n      <h3>Contacts</h3>\n      <Notification message={message} err={err} />\n      <Contacts contacts={contacts} deleteContact={deleteContact} />\n    </div>\n  );\n};\n\nexport default App;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}