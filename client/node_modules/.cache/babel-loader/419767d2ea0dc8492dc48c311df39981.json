{"ast":null,"code":"var _jsxFileName = \"/Users/alinailina/Desktop/full_stack_open2020/part2/phonebook/src/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport contactsService from \"./services/contacts\";\nimport Search from \"./components/Search\";\nimport Form from \"./components/Form\";\nimport Contacts from \"./components/Contacts\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [message, setMessage] = useState(\"\"); // Gell all\n\n  useEffect(() => {\n    contactsService.getAll().then(response => {\n      setContacts(response.data);\n    });\n  }, []);\n\n  const handleName = e => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumber = e => {\n    setNewNumber(e.target.value);\n  }; // Add contact\n\n\n  const addContact = e => {\n    e.preventDefault(); // Create new contact object\n\n    const newContact = {\n      name: newName,\n      number: newNumber\n    }; // Check if contact exists\n\n    const existingContact = contacts.find(contact => contact.name === newContact.name); // If true\n\n    if (existingContact) {\n      alert(`${newContact.name} already exists! Update number?`);\n      const updatedContact = { ...existingContact,\n        number: newContact.number\n      }; // Find index of existing contact\n\n      const index = contacts.findIndex(contact => contact.name === updatedContact.name); // Update existing contact\n\n      contactsService.update(index, updatedContact).then(response => {\n        setContacts(contacts.map((contact, i) => i !== index ? contact : response.data));\n        setMessage(`Updated ${updatedContact.name}'s number`);\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n      }) // Handle error\n      .catch(error => {\n        console.log(\"Already deleted\");\n        setContacts(contacts.filter(contact => contact.name !== updatedContact.name));\n      });\n    } else {\n      // Add new contact\n      contactsService.add(newContact).then(response => {\n        setContacts(contacts.concat(response.data));\n        setMessage(`Added ${newContact.name}`);\n        setTimeout(() => {\n          setMessage(null);\n        }, 3000);\n      });\n    } // Clear inputs\n\n\n    setNewName(\"\");\n    setNewNumber(\"\");\n  }; // Delete contact\n\n\n  const deleteContact = id => {\n    contactsService.deleteContact(id).then(response => {\n      const newArr = contacts.filter(contact => contact.id !== id);\n      setContacts(newArr);\n    });\n  }; // Search\n\n\n  const handleQuery = e => {\n    setQuery(e.target.value);\n  };\n\n  const searchResults = contacts.filter(contact => contact.name.toLowerCase() === query.toLowerCase());\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, \"Phonebook\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, \"Search contacts\"), /*#__PURE__*/React.createElement(Search, {\n    handleQuery: handleQuery,\n    searchResults: searchResults,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Add contact\"), /*#__PURE__*/React.createElement(Form, {\n    onSubmit: addContact,\n    name: newName,\n    number: newNumber,\n    handleName: handleName,\n    handleNumber: handleNumber,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }, \"Contacts\"), /*#__PURE__*/React.createElement(Notification, {\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Contacts, {\n    contacts: contacts,\n    deleteContact: deleteContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default App;\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/alinailina/Desktop/full_stack_open2020/part2/phonebook/src/index.js"],"names":["React","useEffect","useState","ReactDOM","contactsService","Search","Form","Contacts","Notification","App","contacts","setContacts","newName","setNewName","newNumber","setNewNumber","query","setQuery","message","setMessage","getAll","then","response","data","handleName","e","target","value","handleNumber","addContact","preventDefault","newContact","name","number","existingContact","find","contact","alert","updatedContact","index","findIndex","update","map","i","setTimeout","catch","error","console","log","filter","add","concat","deleteContact","id","newArr","handleQuery","searchResults","toLowerCase","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport contactsService from \"./services/contacts\";\n\nimport Search from \"./components/Search\";\nimport Form from \"./components/Form\";\nimport Contacts from \"./components/Contacts\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  // Gell all\n  useEffect(() => {\n    contactsService.getAll().then((response) => {\n      setContacts(response.data);\n    });\n  }, []);\n\n  const handleName = (e) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNumber = (e) => {\n    setNewNumber(e.target.value);\n  };\n\n  // Add contact\n  const addContact = (e) => {\n    e.preventDefault();\n\n    // Create new contact object\n    const newContact = {\n      name: newName,\n      number: newNumber,\n    };\n\n    // Check if contact exists\n    const existingContact = contacts.find(\n      (contact) => contact.name === newContact.name\n    );\n\n    // If true\n    if (existingContact) {\n      alert(`${newContact.name} already exists! Update number?`);\n      const updatedContact = { ...existingContact, number: newContact.number };\n\n      // Find index of existing contact\n      const index = contacts.findIndex(\n        (contact) => contact.name === updatedContact.name\n      );\n\n      // Update existing contact\n      contactsService.update(index, updatedContact).then((response) => {\n        setContacts(\n          contacts.map((contact, i) => (i !== index ? contact : response.data))\n        );\n        setMessage(\n          `Updated ${updatedContact.name}'s number`\n        )\n        setTimeout(() => {\n          setMessage(null)\n        }, 3000)\n      })\n\n      // Handle error\n      .catch(error => {\n        console.log(\"Already deleted\");\n         setContacts(contacts.filter(contact => contact.name !== updatedContact.name))\n       })\n      ;\n\n    } else {\n      // Add new contact\n      contactsService.add(newContact).then((response) => {\n        setContacts(contacts.concat(response.data));\n        setMessage(\n          `Added ${newContact.name}`\n        )\n        setTimeout(() => {\n          setMessage(null)\n        }, 3000)\n      });\n     \n    }\n\n    // Clear inputs\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  // Delete contact\n  const deleteContact = (id) => {\n    contactsService.deleteContact(id).then((response) => {\n      const newArr = contacts.filter((contact) => contact.id !== id);\n      setContacts(newArr);\n    });\n  };\n\n  // Search\n  const handleQuery = (e) => {\n    setQuery(e.target.value);\n  };\n\n  const searchResults = contacts.filter(\n    (contact) => contact.name.toLowerCase() === query.toLowerCase()\n  );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <h2>Search contacts</h2>\n      <Search handleQuery={handleQuery} searchResults={searchResults} />\n      <h2>Add contact</h2>\n      <Form\n        onSubmit={addContact}\n        name={newName}\n        number={newNumber}\n        handleName={handleName}\n        handleNumber={handleNumber}\n      />\n      <h2>Contacts</h2>\n      <Notification message={message}/>\n      <Contacts contacts={contacts} deleteContact={deleteContact} />\n    </div>\n  );\n};\n\nexport default App;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}